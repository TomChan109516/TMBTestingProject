// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCS_Backend_API.Data;

#nullable disable

namespace SCS_Backend_API.Migrations.AppDBContextEFMigrations
{
    [DbContext(typeof(AppDBContextEF))]
    [Migration("20231102192618_LaneStationMappingFixed")]
    partial class LaneStationMappingFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CenterExamCodes", b =>
                {
                    b.Property<int>("CentersCtr_Key")
                        .HasColumnType("int");

                    b.Property<int>("ExamsId")
                        .HasColumnType("int");

                    b.HasKey("CentersCtr_Key", "ExamsId");

                    b.HasIndex("ExamsId");

                    b.ToTable("CenterExamCodes");
                });

            modelBuilder.Entity("CenterHolidayNew_Centre", b =>
                {
                    b.Property<string>("CenterHolidaysCenterHolidayId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CentersCenterId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("CenterHolidaysCenterHolidayId", "CentersCenterId");

                    b.HasIndex("CentersCenterId");

                    b.ToTable("CenterHolidayNew_Centre");
                });

            modelBuilder.Entity("CenterInspectionLanes", b =>
                {
                    b.Property<int>("CentersCtr_Key")
                        .HasColumnType("int");

                    b.Property<int>("InspectionLanesLane_Key")
                        .HasColumnType("int");

                    b.HasKey("CentersCtr_Key", "InspectionLanesLane_Key");

                    b.HasIndex("InspectionLanesLane_Key");

                    b.ToTable("CenterInspectionLanes");
                });

            modelBuilder.Entity("CenterSpecialEvents", b =>
                {
                    b.Property<int>("CentersCtr_Key")
                        .HasColumnType("int");

                    b.Property<int>("SpecialEventEventKey")
                        .HasColumnType("int");

                    b.HasKey("CentersCtr_Key", "SpecialEventEventKey");

                    b.HasIndex("SpecialEventEventKey");

                    b.ToTable("CenterSpecialEvents");
                });

            modelBuilder.Entity("InspectionTypeForVehicleTypeVehicleType", b =>
                {
                    b.Property<string>("InspectionTypeForVehicleTypesInspectionTypeToVehicleTypeMappingId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("VehicleTypesVehicleTypeId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("InspectionTypeForVehicleTypesInspectionTypeToVehicleTypeMappingId", "VehicleTypesVehicleTypeId");

                    b.HasIndex("VehicleTypesVehicleTypeId");

                    b.ToTable("InspectionTypeForVehicleTypeVehicleType");
                });

            modelBuilder.Entity("InspectionTypeInspectionTypeForVehicleType", b =>
                {
                    b.Property<string>("InspectionTypeForVehicleTypesInspectionTypeToVehicleTypeMappingId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InspectionTypesInspectionTypeId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("InspectionTypeForVehicleTypesInspectionTypeToVehicleTypeMappingId", "InspectionTypesInspectionTypeId");

                    b.HasIndex("InspectionTypesInspectionTypeId");

                    b.ToTable("InspectionTypeInspectionTypeForVehicleType");
                });

            modelBuilder.Entity("InspectionTypeLaneAvailInspType", b =>
                {
                    b.Property<string>("InspectionTypesInspectionTypeId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LaneAvailInspTypesLaneAvailInspTypeId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("InspectionTypesInspectionTypeId", "LaneAvailInspTypesLaneAvailInspTypeId");

                    b.HasIndex("LaneAvailInspTypesLaneAvailInspTypeId");

                    b.ToTable("InspectionTypeLaneAvailInspType");
                });

            modelBuilder.Entity("LaneAvailInspTypeNew_Lane", b =>
                {
                    b.Property<string>("LaneAvailInspTypesLaneAvailInspTypeId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LanesLaneId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("LaneAvailInspTypesLaneAvailInspTypeId", "LanesLaneId");

                    b.HasIndex("LanesLaneId");

                    b.ToTable("LaneAvailInspTypeNew_Lane");
                });

            modelBuilder.Entity("LaneAvailVehicleNew_Lane", b =>
                {
                    b.Property<string>("LaneAvailVehiclesLaneAvailVehicleId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LanesLaneId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("LaneAvailVehiclesLaneAvailVehicleId", "LanesLaneId");

                    b.HasIndex("LanesLaneId");

                    b.ToTable("LaneAvailVehicleNew_Lane");
                });

            modelBuilder.Entity("LaneAvailVehicleVehicleType", b =>
                {
                    b.Property<string>("LaneAvailVehiclesLaneAvailVehicleId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("VehicleTypesVehicleTypeId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("LaneAvailVehiclesLaneAvailVehicleId", "VehicleTypesVehicleTypeId");

                    b.HasIndex("VehicleTypesVehicleTypeId");

                    b.ToTable("LaneAvailVehicleVehicleType");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Appointment", b =>
                {
                    b.Property<int>("Appointment_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Appointment_Key"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("AppointmentNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Appointment_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Chnl_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CentreCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<long?>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ExamFee")
                        .HasColumnType("float");

                    b.Property<string>("FeeWaiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeOfCharge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoldTimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsOverBooked")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Last_Txn_Type_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Txn_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberOfReschedules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryExamCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegMark")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SecurityCode")
                        .HasColumnType("bigint");

                    b.Property<string>("SupplementaryExamCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Appointment_Key");

                    b.HasIndex("AppointmentNumber")
                        .IsUnique();

                    b.HasIndex("Bk_Chnl_Id");

                    b.HasIndex("LaneId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SCS_Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.AppointmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("AppointmentNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Txn_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentNumber");

                    b.ToTable("SCS_AppointmentHistory");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Attachment", b =>
                {
                    b.Property<int>("Attachment_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Attachment_Key"));

                    b.Property<string>("AdditionalMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AppointmentNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("CentreCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Attachment_Key");

                    b.ToTable("SCS_Attachment");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.BookingChannel", b =>
                {
                    b.Property<int>("Bk_Chnl_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bk_Chnl_Key"));

                    b.Property<string>("Bk_Chnl_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bk_Chnl_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Bk_Chnl_Key");

                    b.HasIndex("Bk_Chnl_Id")
                        .IsUnique();

                    b.ToTable("SCS_BookingChannel");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Center", b =>
                {
                    b.Property<int>("Ctr_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctr_Key"));

                    b.Property<string>("Ctr_Id")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ctr_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Ctr_Key");

                    b.HasIndex("Ctr_Id")
                        .IsUnique();

                    b.ToTable("SCS_Centers");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.CenterHoliday", b =>
                {
                    b.Property<string>("CenterHolidayId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("AllDayHoliday")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("all_day_hdy");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<string>("HolidayChineseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hdy_chi_name");

                    b.Property<DateTime>("HolidayDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hdy_date");

                    b.Property<DateTime>("HolidayEndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("hdy_end_time");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hdy_name");

                    b.Property<DateTime>("HolidayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("hdy_start_time");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.HasKey("CenterHolidayId");

                    b.ToTable("centre_holiday");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.DynoTimeslot", b =>
                {
                    b.Property<string>("DynoTimeSlotId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("DynoRoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dyno_room_id");

                    b.Property<DateTime>("DynoTimeSlotBegin")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.Property<DateTime>("DynoTimeSlotEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("end");

                    b.Property<string>("ExamScheduleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_schd_desp");

                    b.HasKey("DynoTimeSlotId");

                    b.ToTable("dyno_timeslot");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.ExamCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("ExamFee")
                        .HasColumnType("float");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamCode")
                        .IsUnique();

                    b.ToTable("SCS_ExamCodes");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.ExamSlot", b =>
                {
                    b.Property<int>("ExamSlotKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSlotKey"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quota")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamSlotKey");

                    b.ToTable("SCS_ExamSlotsInformation");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.ExaminationSchedule", b =>
                {
                    b.Property<long>("VisExamScheduleKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vis_exam_schd_key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VisExamScheduleKey"));

                    b.Property<string>("BiennialLevelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("bi_lvl_code");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<DateTime>("ExamScheduleBeginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("exam_schd_bgn_date");

                    b.Property<string>("ExamScheduleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("exam_schd_desp");

                    b.Property<DateTime>("ExamScheduleEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("exam_schd_end_date");

                    b.Property<DateTime>("ExamScheduleLastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("exam_schd_last_upd_date_time");

                    b.Property<string>("ExamScheduleTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("exam_schd_type_code");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("ReserveTimeslotActiveIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("rsrv_tslt_actv_ind");

                    b.HasKey("VisExamScheduleKey");

                    b.HasIndex("CenterId");

                    b.ToTable("examination_schedule");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.ExaminationScheduleDetails", b =>
                {
                    b.Property<long>("VisExamScheduleTimeslotKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vis_exam_schd_tslt_key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VisExamScheduleTimeslotKey"));

                    b.Property<string>("DaySessionTimeslotCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("day_ssn_code");

                    b.Property<string>("ExamScheduleLastUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("inactv_ind");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("TimeslotBeginTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("tslt_bgn_time");

                    b.Property<string>("TimeslotChannelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("tslt_chnl_code");

                    b.Property<string>("TimeslotEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("tslt_end_time");

                    b.Property<int>("TimeslotQuantity")
                        .HasColumnType("int")
                        .HasColumnName("tslt_qty");

                    b.Property<int>("TimeslotReserveQuantity")
                        .HasColumnType("int")
                        .HasColumnName("tslt_qty_reserve");

                    b.Property<long>("VisExamScheduleKey")
                        .HasColumnType("bigint")
                        .HasColumnName("vis_exam_schd_key");

                    b.Property<string>("WeekSessionTimeslotCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("week_ssn_code");

                    b.HasKey("VisExamScheduleTimeslotKey");

                    b.ToTable("examination_schedule_details");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Inspection", b =>
                {
                    b.Property<string>("InspectionId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("DynoRoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("dyno_room_id");

                    b.Property<string>("InspectionAdditionInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("insp_add_info_text");

                    b.Property<string>("InspectionContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("insp_contact_name");

                    b.Property<string>("InspectionContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("insp_contact_num");

                    b.Property<DateTime>("InspectionEndDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("insp_end_datetime");

                    b.Property<string>("InspectionEndResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("insp_end_result");

                    b.Property<DateTime>("InspectionStartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("insp_start_datetime");

                    b.Property<string>("InspectionTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("insp_type_id");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("SecondLaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("second_lane_id");

                    b.Property<string>("TestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vhcl_id");

                    b.HasKey("InspectionId");

                    b.HasIndex("InspectionTypeId");

                    b.HasIndex("LaneId");

                    b.HasIndex("TestId");

                    b.HasIndex("VehicleId");

                    b.ToTable("inspection");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.InspectionLanes", b =>
                {
                    b.Property<int>("Lane_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lane_Key"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lane")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lane_Key");

                    b.ToTable("SCS_InspectionLanes");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.InspectionType", b =>
                {
                    b.Property<string>("InspectionTypeId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("DynoTestType1")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("dyno_test_type_1");

                    b.Property<string>("DynoTestType2")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("dyno_test_type_2");

                    b.Property<string>("DynoTestType3")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("dyno_test_type_3");

                    b.Property<string>("DynoTestType4")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("dyno_test_type_4");

                    b.Property<string>("DynoTestType5")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("dyno_test_type_5");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("exam_code");

                    b.Property<string>("InspectionTypeDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("insp_type_description");

                    b.Property<string>("InspectionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("insp_type_name");

                    b.Property<string>("LaneTestType1")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("lane_test_type_1");

                    b.Property<string>("LaneTestType2")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("lane_test_type_2");

                    b.Property<string>("LaneTestType3")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("lane_test_type_3");

                    b.Property<string>("LaneTestType4")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("lane_test_type_4");

                    b.Property<string>("LaneTestType5")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("lane_test_type_5");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.HasKey("InspectionTypeId");

                    b.ToTable("inspection_type");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.InspectionTypeForVehicleType", b =>
                {
                    b.Property<string>("InspectionTypeToVehicleTypeMappingId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("InspectionTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("inspection_type_id");

                    b.Property<string>("VehicleTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vehicle_type_id");

                    b.HasKey("InspectionTypeToVehicleTypeMappingId");

                    b.ToTable("vehicle_type_for_insp_type");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Lane", b =>
                {
                    b.Property<int>("Lane_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lane_Key"));

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LaneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lane_Key");

                    b.HasIndex("LaneId")
                        .IsUnique();

                    b.ToTable("SCS_Lanes");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.LaneAvailInspType", b =>
                {
                    b.Property<string>("LaneAvailInspTypeId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("InspectionTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("insp_type_id");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.HasKey("LaneAvailInspTypeId");

                    b.ToTable("lane_avail_insp_type");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.LaneAvailVehicle", b =>
                {
                    b.Property<string>("LaneAvailVehicleId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.Property<string>("VehicleTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vhcl_type_id");

                    b.HasKey("LaneAvailVehicleId");

                    b.ToTable("lane_avail_vehicle");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.LaneTimeslot", b =>
                {
                    b.Property<string>("TimeSlotId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("ExamScheduleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_schd_desp");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.Property<DateTime>("TimeSlotBegin")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.Property<DateTime>("TimeSlotEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("end");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("LaneId");

                    b.ToTable("LaneTimeslot");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Login", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Ctr_Id")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastRecordDeletedate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_REC_DEL_DATE");

                    b.Property<string>("LastRecordTransactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_REC_TXN_TYPE_CODE");

                    b.Property<string>("LastRecordTransactionUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_REC_TXN_USER_ID");

                    b.Property<DateTime>("LastRecordTransactiondate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_REC_TXN_DATE");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserID");

                    b.HasIndex("Ctr_Id");

                    b.ToTable("SCS_Logins");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewAppointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("AppointmentAdditionalInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("appt_add_info_text");

                    b.Property<DateTime>("AppointmentBillDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("appt_bill_datetime");

                    b.Property<DateTime>("AppointmentConfirmationDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("appt_confirm_datetime");

                    b.Property<string>("AppointmentContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("appt_contact_name");

                    b.Property<string>("AppointmentContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("appt_contact_num");

                    b.Property<DateTime>("AppointmentCreateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("appt_create_datetime");

                    b.Property<string>("AppointmentCreateSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("appt_create_sys_id");

                    b.Property<string>("AppointmentRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("appt_remark_text");

                    b.Property<int>("AppointmentTimeslotSeqNumber")
                        .HasColumnType("int")
                        .HasColumnName("appt_timeslot_seq_num");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<string>("DaySessionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("day_ssn_code");

                    b.Property<DateTime>("ExactScheduleInspectionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("exact_schd_insp_datetime");

                    b.Property<DateTime>("InspectionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("insp_datetime");

                    b.Property<decimal>("InspectionFeeAmount")
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("insp_fee_amt");

                    b.Property<int>("InspectionFeeWaiveId")
                        .HasColumnType("int")
                        .HasColumnName("insp_fee_wave_id");

                    b.Property<string>("InspectionFeewaiveActiveIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("wave_actv_ind");

                    b.Property<string>("InspectionTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("insp_type_id");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.Property<string>("LaneTimeSlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_timeslot_id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("NoFeeAppointmentIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("no_fee_appt_ind");

                    b.Property<long>("OriginVehicleInspectionAppointmentKey")
                        .HasColumnType("bigint")
                        .HasColumnName("orig_vis_appt_key");

                    b.Property<decimal>("OriginalInspectionFeeAmount")
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("orig_insp_fee_amt");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("payment_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_id");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vhcl_id");

                    b.Property<string>("VehicleInspectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("insp_id");

                    b.Property<decimal>("WaiveInspectionFeeAmount")
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("wave_insp_fee_amt");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CenterId");

                    b.HasIndex("LaneId");

                    b.HasIndex("LaneTimeSlotId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleInspectionId");

                    b.ToTable("New_Appointment");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewVehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AdvertisementApprovalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("adv_aprv_date");

                    b.Property<string>("CERefNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("ce_ref_num");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("cntry_code");

                    b.Property<string>("FrontTyreSizeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("frnt_tyre_size_text");

                    b.Property<string>("HybridVehicleIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("hybd_vhcl_ind");

                    b.Property<string>("InterfaceRecordHashText")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("intf_rec_hash_text");

                    b.Property<string>("LantanVehicleIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("lantau_vhcl_ind");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("PrivateRoadVehicleIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("prvt_road_vhcl_ind");

                    b.Property<string>("RearTyreSizeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("rear_tyre_size_text");

                    b.Property<long>("ValidVehicleNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("valid_vhcl_num");

                    b.Property<int>("VehiclStandardCapQuantity")
                        .HasColumnType("int")
                        .HasColumnName("vhcl_stnd_cap_qty");

                    b.Property<decimal>("VehicleAxle1Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_1_wght");

                    b.Property<decimal>("VehicleAxle2Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_2_wght");

                    b.Property<decimal>("VehicleAxle3Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_3_wght");

                    b.Property<decimal>("VehicleAxle4Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_4_wght");

                    b.Property<decimal>("VehicleAxle5Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_5_wght");

                    b.Property<decimal>("VehicleAxle6Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_6_wght");

                    b.Property<decimal>("VehicleAxle7Weight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_axle_7_wght");

                    b.Property<string>("VehicleBodyTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("vhcl_body_type_code");

                    b.Property<string>("VehicleCancelReasonCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_cncl_rsn_code");

                    b.Property<string>("VehicleChasisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("vhcl_chsss_num");

                    b.Property<string>("VehicleChasisNumberTrimText")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("vhcl_chsss_num_trim_text");

                    b.Property<string>("VehicleClassCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("vhcl_clss_code");

                    b.Property<DateTime>("VehicleCurrentRenewalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("vhcl_cur_rnw_date");

                    b.Property<string>("VehicleDocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("vhcl_doc_num");

                    b.Property<string>("VehicleEngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("vhcl_engn_num");

                    b.Property<decimal>("VehicleEngineSizeQty")
                        .HasColumnType("numeric(5,0)")
                        .HasColumnName("vhcl_engn_size_qty");

                    b.Property<string>("VehicleEngineTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_engn_type_code");

                    b.Property<DateTime>("VehicleFrstRegDate")
                        .HasColumnType("datetime")
                        .HasColumnName("vhcl_frst_reg_date");

                    b.Property<decimal>("VehicleGrossWeight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_grs_wght");

                    b.Property<decimal>("VehicleHeight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_hgt");

                    b.Property<string>("VehicleInspectionOrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("vhcl_insp_ord_code");

                    b.Property<string>("VehicleInspectionOrderCodeList")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("vhcl_insp_ord_code_list");

                    b.Property<DateTime>("VehicleLastAllowExamDate")
                        .HasColumnType("datetime")
                        .HasColumnName("vhcl_last_alw_exam_date");

                    b.Property<string>("VehicleLastAllowExamGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("vhcl_last_alw_exam_grp_name");

                    b.Property<string>("VehicleLeftHandStrgIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_left_hand_strg_ind");

                    b.Property<decimal>("VehicleLength")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_lng");

                    b.Property<DateTime>("VehicleLicenceEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("vhcl_lic_end_date");

                    b.Property<int>("VehicleLowerSeatCapQuantity")
                        .HasColumnType("int")
                        .HasColumnName("vhcl_lwr_seat_cap_qty");

                    b.Property<decimal>("VehicleLuggageWeight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_lug_wght");

                    b.Property<string>("VehicleMakeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("vhcl_make_id");

                    b.Property<string>("VehicleMakeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vhcl_make_name");

                    b.Property<int>("VehicleMfcYear")
                        .HasColumnType("int")
                        .HasColumnName("vhcl_mfc_year");

                    b.Property<string>("VehicleModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("vhcl_model_num");

                    b.Property<string>("VehicleModelRemarkText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vhcl_model_rmk_text");

                    b.Property<string>("VehicleOwnerChineseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("vhcl_ownr_chi_name");

                    b.Property<string>("VehicleOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("vhcl_ownr_name");

                    b.Property<string>("VehiclePVRMDoubleLineIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_pvrm_dbl_line_ind");

                    b.Property<string>("VehiclePVRMLine1Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("vhcl_pvrm_line_1_text");

                    b.Property<string>("VehiclePVRMLine2Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("vhcl_pvrm_line_2_text");

                    b.Property<string>("VehiclePVRMTrimText")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("vhcl_pvrm_trim_text");

                    b.Property<string>("VehiclePassengerServicelicenceList")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("vhcl_psl_list");

                    b.Property<string>("VehiclePermitTypeList")
                        .IsRequired()
                        .HasColumnType("nvarchar(600)")
                        .HasColumnName("vhcl_prm_list");

                    b.Property<decimal>("VehiclePermittedGrossWeight")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_pgv_wght");

                    b.Property<string>("VehiclePrimaryColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_prmy_color_code");

                    b.Property<decimal>("VehicleRatePower")
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("vhcl_rate_pwr");

                    b.Property<string>("VehicleRecordTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("vhcl_rec_type_code");

                    b.Property<string>("VehicleRegMarkDisplayText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vhcl_reg_mark_disp_text");

                    b.Property<string>("VehicleRegMarkNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("vhcl_reg_mark_num");

                    b.Property<string>("VehicleRegistrationDocumentTransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("vhcl_reg_doc_txn_num");

                    b.Property<string>("VehicleRemarkText")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vhcl_rmk_text");

                    b.Property<string>("VehicleSecondColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_scnd_color_code");

                    b.Property<string>("VehicleServiceAnnotationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("vhcl_srvc_annot_text");

                    b.Property<string>("VehicleServiceRestrictionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vhcl_srvc_rstr_text");

                    b.Property<string>("VehicleStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_sts_code");

                    b.Property<string>("VehicleSubClassCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_sbclss_code");

                    b.Property<string>("VehicleTypeApprovalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vhcl_type_aprv_num");

                    b.Property<string>("VehicleTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vhcl_type_id");

                    b.Property<DateTime>("VehicleUpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("vhcl_upd_datetime");

                    b.Property<int>("VehicleUpperSeatCapQuantity")
                        .HasColumnType("int")
                        .HasColumnName("vhcl_upr_seat_cap_qty");

                    b.Property<DateTime>("VehicleVICOUptoDate")
                        .HasColumnType("datetime")
                        .HasColumnName("vhcl_vico_date");

                    b.Property<string>("VehicleValidId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("vhcl_valid_id");

                    b.Property<string>("VehicleWeightCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_wght_code");

                    b.Property<decimal>("VehicleWidth")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vhcl_wdth");

                    b.HasKey("VehicleId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("new_vehicle");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewWatchlist", b =>
                {
                    b.Property<string>("WatchListId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("TriggerAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("trigger_action");

                    b.Property<string>("WatchReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watchlist_reason");

                    b.HasKey("WatchListId");

                    b.ToTable("new_watchlist");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.New_Centre", b =>
                {
                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CenterAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ctr_addr");

                    b.Property<DateTime>("CenterBeginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ctr_begin_date");

                    b.Property<string>("CenterChineseAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ctr_chi_addr");

                    b.Property<string>("CenterChineseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ctr_chi_name");

                    b.Property<DateTime>("CenterEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ctr_end_date");

                    b.Property<string>("CenterFridayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_fri_oprt_time_end");

                    b.Property<string>("CenterFridayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_fri_oprt_time_start");

                    b.Property<string>("CenterMondayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_mon_oprt_time_end");

                    b.Property<string>("CenterMondayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_mon_oprt_time_start");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ctr_name");

                    b.Property<string>("CenterPhone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ctr_phone1");

                    b.Property<string>("CenterPhone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ctr_phone2");

                    b.Property<string>("CenterSaturdayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_sat_oprt_time_end");

                    b.Property<string>("CenterSaturdayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_sat_oprt_time_start");

                    b.Property<string>("CenterSundayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_sun_oprt_time_end");

                    b.Property<string>("CenterSundayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_sun_oprt_time_start");

                    b.Property<string>("CenterThrusdayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_thu_oprt_time_end");

                    b.Property<string>("CenterThrusdayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_thu_oprt_time_start");

                    b.Property<string>("CenterTuesdayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_tue_oprt_time_end");

                    b.Property<string>("CenterTuesdayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_tue_oprt_time_start");

                    b.Property<string>("CenterWednesdayOprtnTimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_wed_oprt_time_end");

                    b.Property<string>("CenterWednesdayOprtnTimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ctr_wed_oprt_time_start");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.HasKey("CenterId");

                    b.ToTable("New_centre");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.New_Lane", b =>
                {
                    b.Property<string>("LaneId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<int>("DefaultCapacity")
                        .HasColumnType("int")
                        .HasColumnName("default_capacity");

                    b.Property<string>("LaneDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lane_description");

                    b.Property<string>("LaneStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("lane_actv_ind");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("laneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lane_name");

                    b.HasKey("LaneId");

                    b.HasIndex("CenterId");

                    b.ToTable("lane");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<string>("ExternalReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("extl_ref_num");

                    b.Property<string>("FinancialInsititutionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("fin_instt_code");

                    b.Property<string>("FinancialInsititutionPaymentReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fin_instt_pymt_ref_num");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("pymt_amt");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("pymt_mthd_code");

                    b.Property<DateTime>("PaymentTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("pymt_txn_datetime");

                    b.Property<string>("PaymentTransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("pymt_txn_num");

                    b.Property<string>("PaymentTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("pymt_type_code");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.SpecialEvent", b =>
                {
                    b.Property<string>("SpecialEventId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AppointmentRescheduleBeginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("appt_rschd_bgn_date");

                    b.Property<DateTime>("AppointmentRescheduleEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("appt_rschd_end_date");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("SpecialEventDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("spcl_evnt_description");

                    b.Property<DateTime>("SpecialEventEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("spcl_evnt_end_date");

                    b.Property<DateTime>("SpecialEventEndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("spcl_evnt_end_time");

                    b.Property<string>("SpecialEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("spcl_evnt_name");

                    b.Property<DateTime>("SpecialEventStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("spcl_evnt_start_date");

                    b.Property<DateTime>("SpecialEventStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("spcl_evnt_start_time");

                    b.HasKey("SpecialEventId");

                    b.HasIndex("CenterId");

                    b.ToTable("special_event");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.SpecialEvents", b =>
                {
                    b.Property<int>("EventKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventKey"));

                    b.Property<string>("Ctr_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("appt_rschd_bgn_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("appt_rschd_end_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("last_rec_txn_datetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("last_rec_txn_type_code")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("last_rec_txn_user_id")
                        .HasColumnType("datetime2");

                    b.Property<string>("spcl_event_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("spcl_event_end_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("spcl_event_end_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("spcl_event_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("spcl_event_start_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("spcl_event_start_time")
                        .HasColumnType("datetime2");

                    b.HasKey("EventKey");

                    b.ToTable("SCS_SpecialEvents");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Station", b =>
                {
                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("LaneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lane_id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("StationActiveIndicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("station_actv_ind");

                    b.Property<string>("StationDesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_description");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("station_name");

                    b.HasKey("StationId");

                    b.HasIndex("LaneId");

                    b.ToTable("station");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.SubClass", b =>
                {
                    b.Property<int>("VehicleSubClass_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSubClass_Key"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("VehicleClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleSubClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleSubClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSubClass_Key");

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleSubClassId")
                        .IsUnique();

                    b.ToTable("SCS_SubClasses");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Test", b =>
                {
                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<int>("Attempt")
                        .HasColumnType("int")
                        .HasColumnName("attempt");

                    b.Property<string>("EndResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("end_result");

                    b.Property<string>("InspectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("inspection_id");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("mode");

                    b.Property<string>("SkipApproval")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("skip_approval");

                    b.Property<string>("SkipReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skip_reason");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("station_id");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("test_type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("TestId");

                    b.ToTable("test");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserAuth", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("AccountStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("acct_sts_code");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pwd_hash_text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_auth");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserGroup", b =>
                {
                    b.Property<string>("UserGroupId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("PrivilegeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("privilege_id");

                    b.HasKey("UserGroupId");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("user_group");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserInUserGroups", b =>
                {
                    b.Property<string>("UserToUserGroupMappingId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("UserGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_grp_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("UserToUserGroupMappingId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("user_in_user_group");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserPrivilege", b =>
                {
                    b.Property<string>("PrivilegeId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("PrivilegeDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("privilege_desp");

                    b.Property<int>("PrivilegeLevel")
                        .HasColumnType("int")
                        .HasColumnName("privilege_level");

                    b.HasKey("PrivilegeId");

                    b.ToTable("user_privilege");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserWorkday", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("UserDutyEndTimeFri")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_fri");

                    b.Property<string>("UserDutyEndTimeMon")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_mon");

                    b.Property<string>("UserDutyEndTimeSat")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_sat");

                    b.Property<string>("UserDutyEndTimeSun")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_sun");

                    b.Property<string>("UserDutyEndTimeThu")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_thu");

                    b.Property<string>("UserDutyEndTimeTue")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_tue");

                    b.Property<string>("UserDutyEndTimeWed")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_end_time_wed");

                    b.Property<string>("UserDutyStartTimeFri")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_fri");

                    b.Property<string>("UserDutyStartTimeMon")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_mon");

                    b.Property<string>("UserDutyStartTimeSat")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_sat");

                    b.Property<string>("UserDutyStartTimeSun")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_sun");

                    b.Property<string>("UserDutyStartTimeThu")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_thu");

                    b.Property<string>("UserDutyStartTimeTue")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_tue");

                    b.Property<string>("UserDutyStartTimeWed")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("user_duty_start_time_wed");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_workday");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Users", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ctr_id");

                    b.Property<DateTime>("LastRecordTransactionDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_rec_txn_datetime");

                    b.Property<string>("LastRecordTransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("last_rec_txn_type_code");

                    b.Property<string>("LastRecordTransactionUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("last_rec_txn_user_id");

                    b.Property<string>("PrivilegeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("privilege_id");

                    b.Property<DateTime>("UserCenterRoleBeginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("user_ctr_role_bgn_date");

                    b.Property<DateTime>("UserCenterRoleEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("user_ctr_role_end_date");

                    b.Property<string>("UserCenterRoleRemarkText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_ctr_role_rmk_text");

                    b.HasKey("UserId");

                    b.HasIndex("CenterId");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleClass", b =>
                {
                    b.Property<int>("VehicleClass_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleClass_Key"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("VehicleClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleClass_Key");

                    b.HasIndex("VehicleClassId")
                        .IsUnique();

                    b.ToTable("SCS_VehicleClasses");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleCountryCode", b =>
                {
                    b.Property<int>("CountryCodekey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryCodekey"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryCodekey");

                    b.ToTable("SCS_VehicleCountryCodes");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleInformation", b =>
                {
                    b.Property<int>("Vhcl_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Vhcl_Key"));

                    b.Property<DateTime?>("ADApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Attribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Axle1Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Axle2Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Axle3Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Axle4Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Axle5Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Axle6Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Axle7Weight")
                        .HasColumnType("float");

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CENumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ChassisTrimText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayRegMark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EngineNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("EngineSize")
                        .HasColumnType("int");

                    b.Property<string>("EngineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstRegDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FloatName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontTireSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GRSWeight")
                        .HasColumnType("float");

                    b.Property<string>("HybridVehicle")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("InspectionOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionOrderCodeList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterfaceRecordHashText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("LUGWeight")
                        .HasColumnType("float");

                    b.Property<bool?>("LantauVehicle")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAllowExamDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRecordedTranscDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastRecordedTranscTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastRecordedTranscUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LicenceExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationChinese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerNameChinese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PCVWeight")
                        .HasColumnType("float");

                    b.Property<double?>("PGVWeight")
                        .HasColumnType("float");

                    b.Property<string>("PSL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PVRMDoubleLineIndicator")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PVRMLine1Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PVRMLine2Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PVRMTrimText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkingBrake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permit")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VehiclePermitNumber");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PrivateRoadVehicleInd")
                        .HasColumnType("bit");

                    b.Property<float?>("RatedPower")
                        .HasColumnType("real");

                    b.Property<string>("RearTireSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegMark")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RegMarkDispText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeatCapacity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LowerSeatCapacity");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceAnnotationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceBreak")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ServiceRestrictionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StandSeatCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TANumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperSeatCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VICO")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehRegistractionDocTransNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("VehicleHeight")
                        .HasColumnType("float");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("VehicleLength")
                        .HasColumnType("float");

                    b.Property<string>("VehicleRemarkText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleSubClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("VehicleWidth")
                        .HasColumnType("float");

                    b.Property<string>("VhclTypeCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("WeightCode")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("leftHandSteering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("leftHandSteeringIndicator")
                        .HasColumnType("bit");

                    b.HasKey("Vhcl_Key");

                    b.HasIndex("ChassisNumber")
                        .IsUnique();

                    b.HasIndex("CountryCode");

                    b.HasIndex("RegMark")
                        .IsUnique();

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("SCS_VehicleInfo");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleMake", b =>
                {
                    b.Property<int>("Make_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Make_Key"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MakeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MakeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Make_Key");

                    b.HasIndex("MakeId")
                        .IsUnique();

                    b.ToTable("SCS_VehicleMake");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleType", b =>
                {
                    b.Property<string>("VehicleTypeId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("VehicleClassCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("vhcl_class");

                    b.Property<string>("VehicleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("VehicleSubClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("vhcl_subclass");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("vehicle_type");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchList", b =>
                {
                    b.Property<long>("Vhcl_WhLst_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Vhcl_WhLst_Key"));

                    b.Property<long?>("BodyType")
                        .HasColumnType("bigint");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Cancelled_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ctr_Key")
                        .HasColumnType("int");

                    b.Property<long?>("EngineType")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FirstRegDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Last_Rec_Txn_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Txn_Type_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Txn_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PGVWeight")
                        .HasColumnType("float");

                    b.Property<string>("RegMark")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WhLst_Rsn_Key")
                        .HasColumnType("int");

                    b.HasKey("Vhcl_WhLst_Key");

                    b.HasIndex("Ctr_Key");

                    b.HasIndex("WhLst_Rsn_Key");

                    b.ToTable("SCSWatchList");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchListReason", b =>
                {
                    b.Property<int>("WhLst_Rsn_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhLst_Rsn_Key"));

                    b.Property<DateTime>("Last_Rec_Del_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Last_Rec_Txn_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Txn_Type_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Txn_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhLst_Rsn_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhLst_Rsn_Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhLst_Rsn_Type_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WhLst_Rsn_Key");

                    b.ToTable("SCS_WatchListReason");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchlistUserAccess", b =>
                {
                    b.Property<string>("WatchListUserAccessId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("AlertTarget")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("alert_target");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("user_id");

                    b.Property<string>("WatchListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("watchlist_id");

                    b.HasKey("WatchListUserAccessId");

                    b.HasIndex("UserId");

                    b.HasIndex("WatchListId");

                    b.ToTable("watchlist_user_access");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchlistVehicle", b =>
                {
                    b.Property<string>("WatchListVehicleId")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("WatchListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("watchlist_id");

                    b.HasKey("WatchListVehicleId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("WatchListId");

                    b.ToTable("watchlist_vehicle");
                });

            modelBuilder.Entity("CenterExamCodes", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Center", null)
                        .WithMany()
                        .HasForeignKey("CentersCtr_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.ExamCodes", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CenterHolidayNew_Centre", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.CenterHoliday", null)
                        .WithMany()
                        .HasForeignKey("CenterHolidaysCenterHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.New_Centre", null)
                        .WithMany()
                        .HasForeignKey("CentersCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CenterInspectionLanes", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Center", null)
                        .WithMany()
                        .HasForeignKey("CentersCtr_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.InspectionLanes", null)
                        .WithMany()
                        .HasForeignKey("InspectionLanesLane_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CenterSpecialEvents", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Center", null)
                        .WithMany()
                        .HasForeignKey("CentersCtr_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.SpecialEvents", null)
                        .WithMany()
                        .HasForeignKey("SpecialEventEventKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InspectionTypeForVehicleTypeVehicleType", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.InspectionTypeForVehicleType", null)
                        .WithMany()
                        .HasForeignKey("InspectionTypeForVehicleTypesInspectionTypeToVehicleTypeMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.VehicleType", null)
                        .WithMany()
                        .HasForeignKey("VehicleTypesVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InspectionTypeInspectionTypeForVehicleType", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.InspectionTypeForVehicleType", null)
                        .WithMany()
                        .HasForeignKey("InspectionTypeForVehicleTypesInspectionTypeToVehicleTypeMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.InspectionType", null)
                        .WithMany()
                        .HasForeignKey("InspectionTypesInspectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InspectionTypeLaneAvailInspType", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.InspectionType", null)
                        .WithMany()
                        .HasForeignKey("InspectionTypesInspectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.LaneAvailInspType", null)
                        .WithMany()
                        .HasForeignKey("LaneAvailInspTypesLaneAvailInspTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaneAvailInspTypeNew_Lane", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.LaneAvailInspType", null)
                        .WithMany()
                        .HasForeignKey("LaneAvailInspTypesLaneAvailInspTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.New_Lane", null)
                        .WithMany()
                        .HasForeignKey("LanesLaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaneAvailVehicleNew_Lane", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.LaneAvailVehicle", null)
                        .WithMany()
                        .HasForeignKey("LaneAvailVehiclesLaneAvailVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.New_Lane", null)
                        .WithMany()
                        .HasForeignKey("LanesLaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaneAvailVehicleVehicleType", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.LaneAvailVehicle", null)
                        .WithMany()
                        .HasForeignKey("LaneAvailVehiclesLaneAvailVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.VehicleType", null)
                        .WithMany()
                        .HasForeignKey("VehicleTypesVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Appointment", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.BookingChannel", "BookingChannel")
                        .WithMany("Appointments")
                        .HasForeignKey("Bk_Chnl_Id")
                        .HasPrincipalKey("Bk_Chnl_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.Lane", "Lanes")
                        .WithMany("Appointments")
                        .HasForeignKey("LaneId")
                        .HasPrincipalKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.VehicleInformation", "VehicleInfo")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleId")
                        .HasPrincipalKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingChannel");

                    b.Navigation("Lanes");

                    b.Navigation("VehicleInfo");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.AppointmentHistory", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Appointment", "Appointment")
                        .WithMany("History")
                        .HasForeignKey("AppointmentNumber")
                        .HasPrincipalKey("AppointmentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.ExaminationSchedule", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Centre", "Center")
                        .WithMany("ExaminationSchedules")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Inspection", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.InspectionType", "InspectionType")
                        .WithMany("Inspections")
                        .HasForeignKey("InspectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.New_Lane", "Lane")
                        .WithMany("Inspections")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.Test", "Test")
                        .WithMany("Inspections")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.NewVehicle", "NewVehicle")
                        .WithMany("Inspections")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionType");

                    b.Navigation("Lane");

                    b.Navigation("NewVehicle");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.LaneTimeslot", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Lane", "Lane")
                        .WithMany("LaneTimeslot")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lane");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Login", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Center", "Centers")
                        .WithMany("Logins")
                        .HasForeignKey("Ctr_Id")
                        .HasPrincipalKey("Ctr_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centers");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewAppointment", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Centre", "Centre")
                        .WithMany("NewAppointments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.New_Lane", "Lane")
                        .WithMany("Appointments")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.LaneTimeslot", "LaneTimeslot")
                        .WithMany("Appointments")
                        .HasForeignKey("LaneTimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.Payment", "Payment")
                        .WithOne("NewAppointments")
                        .HasForeignKey("SCS_Backend_API.Models1.NewAppointment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.UserAuth", "UserAuth")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.NewVehicle", "Vehicle")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.Inspection", "Inspection")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleInspectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Centre");

                    b.Navigation("Inspection");

                    b.Navigation("Lane");

                    b.Navigation("LaneTimeslot");

                    b.Navigation("Payment");

                    b.Navigation("UserAuth");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewVehicle", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.New_Lane", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Centre", "Center")
                        .WithMany("Lanes")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Payment", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Centre", "Centre")
                        .WithMany("Payments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Centre");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.SpecialEvent", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Centre", "Centre")
                        .WithMany("SpecialEvents")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centre");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Station", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Lane", "Lanes")
                        .WithMany("Stations")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lanes");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.SubClass", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.VehicleClass", "VehicleClasses")
                        .WithMany("SubClasses")
                        .HasForeignKey("VehicleClassId")
                        .HasPrincipalKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleClasses");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserAuth", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Users", "Users")
                        .WithOne("UserAuth")
                        .HasForeignKey("SCS_Backend_API.Models1.UserAuth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserGroup", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.UserPrivilege", "Privilege")
                        .WithMany("UserGroups")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Privilege");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserInUserGroups", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.UserGroup", "UserGroupforUser")
                        .WithMany("UserInUserGroup")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.Users", "Users")
                        .WithMany("InUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGroupforUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserWorkday", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Users", "Users")
                        .WithOne("UserWorkday")
                        .HasForeignKey("SCS_Backend_API.Models1.UserWorkday", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Users", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.New_Centre", "NewCentre")
                        .WithMany("Users")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.UserPrivilege", "UserPrivilege")
                        .WithMany("Users")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewCentre");

                    b.Navigation("UserPrivilege");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleInformation", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.VehicleCountryCode", "VehicleCountryCode")
                        .WithMany("VehicleInfo")
                        .HasForeignKey("CountryCode")
                        .HasPrincipalKey("CountryCode");

                    b.HasOne("SCS_Backend_API.Models1.VehicleClass", "VehicleClasses")
                        .WithMany("VehicleInfo")
                        .HasForeignKey("VehicleClassId")
                        .HasPrincipalKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleClasses");

                    b.Navigation("VehicleCountryCode");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchList", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Center", "CenterKey")
                        .WithMany("Wathclist")
                        .HasForeignKey("Ctr_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.WatchListReason", "ReasonKey")
                        .WithMany("Watchlists")
                        .HasForeignKey("WhLst_Rsn_Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CenterKey");

                    b.Navigation("ReasonKey");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchlistUserAccess", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.Users", "Users")
                        .WithMany("WatchlistUserAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.NewWatchlist", "Watchlist")
                        .WithMany("WatchlistUserAccesses")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchlistVehicle", b =>
                {
                    b.HasOne("SCS_Backend_API.Models1.NewVehicle", "NewVehicle")
                        .WithMany("WatchlistVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS_Backend_API.Models1.NewWatchlist", "Watchlist")
                        .WithMany("WatchlistVehicles")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewVehicle");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Appointment", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.BookingChannel", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Center", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("Wathclist");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Inspection", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.InspectionType", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Lane", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.LaneTimeslot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewVehicle", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Inspections");

                    b.Navigation("WatchlistVehicles");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.NewWatchlist", b =>
                {
                    b.Navigation("WatchlistUserAccesses");

                    b.Navigation("WatchlistVehicles");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.New_Centre", b =>
                {
                    b.Navigation("ExaminationSchedules");

                    b.Navigation("Lanes");

                    b.Navigation("NewAppointments");

                    b.Navigation("Payments");

                    b.Navigation("SpecialEvents");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.New_Lane", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Inspections");

                    b.Navigation("LaneTimeslot");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Payment", b =>
                {
                    b.Navigation("NewAppointments")
                        .IsRequired();
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Test", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserAuth", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserGroup", b =>
                {
                    b.Navigation("UserInUserGroup");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.UserPrivilege", b =>
                {
                    b.Navigation("UserGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.Users", b =>
                {
                    b.Navigation("InUserGroups");

                    b.Navigation("UserAuth")
                        .IsRequired();

                    b.Navigation("UserWorkday")
                        .IsRequired();

                    b.Navigation("WatchlistUserAccesses");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleClass", b =>
                {
                    b.Navigation("SubClasses");

                    b.Navigation("VehicleInfo");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleCountryCode", b =>
                {
                    b.Navigation("VehicleInfo");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleInformation", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SCS_Backend_API.Models1.WatchListReason", b =>
                {
                    b.Navigation("Watchlists");
                });
#pragma warning restore 612, 618
        }
    }
}
